'''

-Didn't set a minimum frame rate because game is very simple, not very demanding on computer
- Surfaces:
    -Display Surface(the game window. Anything displayed goes on here)
        -Must be unique, must always be visible
    -(Regular) Surface(essentially a single image)
        -Needs to be on display surface to be visible
        -Flexible amount, only displayed when connected to display surface 

for obstacle_rect in obstacle_rect_list:  
    if obstacle_rect.colliderect(player_rect):
        game_active = False

player_stand = pygame.transform.scale2x(player_stand) #scales the surface to be twice as large, maintaining aspect ratio

temp_obstacle_rect_list = [] #this entire block of code is the same as   obstacle_rect_list = [obstacle for obstacle in obstacle_rect_list if obstacle.x >0]
for obstacle_rect in obstacle_rect_list:
    if obstacle_rect.x >0:
        temp_obstacle_rect_list.append(obstacle_rect)
obstacle_rect_list = temp_obstacle_rect_list

snail_rect = snail_surf.get_rect(bottomright = (600,300)) #Rect object stores coordinates and dimensions, NOT the image data(pixels, etc..)

score_surf = test_font.render('My game', False, (64,64,64))#creates text surface, second parameter is to smooth the text out, third is color (I used rgb tuple for this)
score_rect = score_surf.get_rect(center = (400, 50) )


pygame.draw.line(screen, 'Black', (0,0), pygame.mouse.get_pos(), 20)
pygame.draw.ellipse(screen, 'Brown', pygame.Rect(50,200, 100, 100))

 if player_rect.colliderect(snail_rect): #returns true or false
        print('collision')
    mouse_pos = pygame.mouse.get_pos() #returns x and y position
    if player_rect.collidepoint(mouse_pos):
        print(pygame.mouse.get_pressed()) #returns tuple of boolean values for left click, middle click, and right click

if event.type == pygame.MOUSEMOTION: 
    print(event.pos)
    if player_rect.collidepoint(event.pos):
        print('player x mouse collision')

if event.type == pygame.KEYDOWN:
    if event.key == pygame.K_RIGHT:
        player_rect.left +=1
    if event.key == pygame.K_LEFT:
        player_rect.left -=1
    if event.key == pygame.K_UP:
        player_rect.top -=1
    if event.key == pygame.K_DOWN:
        player_rect.top +=1

sky_surface = pygame.image.load('graphics/background_sky.jpg') #directs to an image inside the folder 'Pygame-Learning'ground_surface = pygame.image.load('graphics/ground.jpg') #image is convereted into surface object 537 x 200
ground_surface = pygame.image.load('graphics/background_ground.jpg')


test_surface = pygame.Surface((100, 200)) #creates a (regular) surface
test_surface.fill('Red')

if event.type == pygame.KEYUP:
    print('key up')

 keys = pygame.key.get_pressed() #alternate method to check for key press rather than through an event
    if keys[pygame.K_SPACE]:        #this method is useful when using classes
        print('jump')

if event.button ==3:
    print('right click')

if event.type == pygame.MOUSEBUTTONUP:
    print('mouse up')




'''

